//@version=6
indicator("Financial Data", overlay = true, format = format.volume, precision = 2)

// Constants
MILLION = 1000000

COLOR_BACKGROUND = color.black
COLOR_FRAME = COLOR_BACKGROUND
COLOR_BORDER = COLOR_BACKGROUND
COLOR_TEXT = color.white
TABLE_BORDER_WIDTH = 1
TABLE_FRAME_WIDTH = 1
TABLE_KEY_TEXT_ALIGN = text.align_right
TABLE_VALUE_TEXT_ALIGN = text.align_center
TABLE_TITLE_TEXT_ALIGN = text.align_center
TABLE_TEXT_SIZE = size.normal

COLOR_ALERT = color.red
COLOR_WARNING = color.orange
COLOR_GOOD = color.green
COLOR_NEUTRAL = COLOR_BACKGROUND

FLOAT_ALERT = 50
FLOAT_GOOD = 100

PE_ALERT = 25
PE_GOOD = 15
PE_ALERT_LEVEL2 = 0

EPS_ALERT = 0

PB_ALERT = 3.5
PB_GOOD = 1.5

DE_ALERT = 2
DE_GOOD = 1

PEG_GOOD = 1

DIVIDEND_GOOD = 0

GROSS_MARGIN_ALERT = 0
GROSS_MARGIN_GOOD = 30

NET_MARGIN_ALERT = 0
NET_MARGIN_GOOD = 5

CASH_FLOW_GOOD = 0

EBIT_GOOD = 0

EBITDA_GOOD = 0

ROE_ALERT = 0
ROE_GOOD = 15

ROA_ALERT = 3
ROA_GOOD = 5

ROIC_ALERT = 8
ROIC_GOOD = 15

// Function that around to 2 decimals
truncate(num) =>
    factor = math.pow(10, 2)
    int(num * factor) / factor

// Simulate map for all financial data table
stringNamesArray = array.new<string>()
stringValuesArray = array.new<string>()
colorArray = array.new<color>()
// Functions to add key values to map
f_add(name, value, valueColor) =>
    array.push(stringValuesArray, value)
    array.push(stringNamesArray, name)
    array.push(colorArray, valueColor)
// Functions to get values from map by id
f_get(id) =>
    [array.get(stringNamesArray, id), array.get(stringValuesArray, id), array.get(colorArray, id)]

// SECTOR
string sector = syminfo.sector
string subSector = syminfo.industry

// FLOAT
floatShares = request.financial(syminfo.tickerid, "FLOAT_SHARES_OUTSTANDING", "FY") / MILLION
getFloatColor(value) =>
    color color = COLOR_NEUTRAL
    if(value < FLOAT_ALERT)
        color := COLOR_ALERT
    else if(value >= FLOAT_GOOD)
        color := COLOR_GOOD
    else
        color := COLOR_WARNING
    color
stringName_floatShares = "FLOAT"
stringValue_floatShares = str.tostring(truncate(floatShares)) + "M"

// EARNING PER SHARE
// Earnings per share (EPS) is a company's net profit divided by the number of common shares it has outstanding.
EPS = request.financial(syminfo.tickerid, "EARNINGS_PER_SHARE_DILUTED", "TTM")
getEpsColor(value) =>
    color color = COLOR_NEUTRAL
    if(value <= EPS_ALERT)
        color := COLOR_ALERT
    else
        color := COLOR_GOOD
    color
stringName_EPS = "EPS"
stringValue_EPS = "$"+str.tostring(truncate(EPS))

// PRICE EARNING RATIO
// Price Earnings Ratio is calculated by dividing the current market price per share by the earnings per share for the last 12-month period.
PriceEarningsRatio = close / EPS
peTextColor = PriceEarningsRatio < 0 ? COLOR_ALERT : COLOR_TEXT
getPeColor(value) =>
    color color = COLOR_NEUTRAL
    if(value > PE_ALERT)
        color := COLOR_ALERT
    else if(value < PE_ALERT_LEVEL2)
        color := COLOR_BACKGROUND
    else if(value <= PE_GOOD)
        color := COLOR_GOOD
    else
        color := COLOR_WARNING
    color
stringName_PE = "P/E ratio"
stringValue_PE = str.tostring(truncate(PriceEarningsRatio))

// BOOK VALUE PER SHARE
// Book value per share (BVPS) is the ratio of equity available to common shareholders divided by the number of outstanding shares. 
BVPS  = request.financial(syminfo.tickerid, "BOOK_VALUE_PER_SHARE", "FQ")
// PRICE BOOK RATIO
// Price Book Ratio is calculated by dividing the price per share by the book value per share.
PriceBookRatio = close / BVPS
getPriceBookRatioColor(value) =>
    color color = COLOR_NEUTRAL
    if(value > PB_ALERT)
        color := COLOR_ALERT
    else if(value < PB_GOOD)
        color := COLOR_GOOD
    else
        color := COLOR_WARNING
    color
stringName_PB = "P/B ratio"
stringValue_PB = str.tostring(truncate(PriceBookRatio))

// DEBT TO EQUITY RATIO
// Debt to equity ratio is the ratio of Total debt to Total equity
DE = request.financial(syminfo.tickerid, "DEBT_TO_EQUITY", "FQ")
getDeRatioColor(value) =>
    color color = COLOR_NEUTRAL
    if(value >= DE_ALERT)
        color := COLOR_ALERT
    else if(value < DE_GOOD)
        color := COLOR_GOOD
    else
        color := COLOR_WARNING
    color
stringName_DE = "D/E ratio"
stringValue_DE = str.tostring(truncate(DE))

// EPS diluted one year growth
EPS_diluted_one_year_growth = request.financial(syminfo.tickerid, "EARNINGS_PER_SHARE_BASIC_ONE_YEAR_GROWTH", "FQ")

// PRICE EARNING TO GROWTH RATIO
// It is the P/E ratio (price-to-earnings ratio) divided by the growth rate.
PEG = PriceEarningsRatio / EPS_diluted_one_year_growth
getPegRatioColor(value) =>
    color color = COLOR_NEUTRAL
    if(value <= PEG_GOOD)
        color := COLOR_GOOD
    else
        color := COLOR_ALERT
    color
stringName_PEG = "PEG ratio"
stringValue_PEG = str.tostring(truncate(PEG))

// DIVIDEND
dividend = request.financial(syminfo.tickerid, "DIVIDENDS_YIELD", "FQ")
getDividendColor(value) =>
    color color = COLOR_NEUTRAL
    if(value <= DIVIDEND_GOOD)
        color := COLOR_NEUTRAL
    else
        color := COLOR_GOOD
    color
stringName_dividend = "DIVIDEND"
stringValue_dividend = str.tostring(truncate(dividend)) + "%"

// GROSS MARGIN
grossMargin = request.financial(syminfo.tickerid, "GROSS_MARGIN", "FQ")
getGrossMarginColor(value) =>
    color color = COLOR_NEUTRAL
    if(value < GROSS_MARGIN_ALERT)
        color := COLOR_ALERT
    else if(value >= GROSS_MARGIN_GOOD)
        color := COLOR_GOOD
    else
        color := COLOR_WARNING
    color
stringName_grossMargin = "GR. MARGIN"
stringValue_grossMargin = str.tostring(truncate(grossMargin)) + "%"

// NET MARGIN
netMargin = request.financial(syminfo.tickerid, "NET_MARGIN", "FQ")
getNetMarginColor(value) =>
    color color = COLOR_NEUTRAL
    if(value < NET_MARGIN_ALERT)
        color := COLOR_ALERT
    else if(value >= NET_MARGIN_GOOD)
        color := COLOR_GOOD
    else
        color := COLOR_WARNING
    color
stringName_netMargin = "NET MARGIN"
stringValue_netMargin = str.tostring(truncate(netMargin)) + "%"

// CASH FROM OPERATING_ACTIVITIES
cashFlow = request.financial(syminfo.tickerid, "FREE_CASH_FLOW", "TTM") / MILLION
getCashFlowColor(value) =>
    color color = COLOR_NEUTRAL
    if(value < CASH_FLOW_GOOD)
        color := COLOR_ALERT
    else
        color := COLOR_GOOD
    
stringName_cashFlow = "CASH FLOW"
stringValue_cashFlow = str.tostring(truncate(cashFlow)) + "M"

// EBIT
EBIT = request.financial(syminfo.tickerid, "EBIT", "TTM") / MILLION
getEbitColor(value) =>
    color color = COLOR_NEUTRAL
    if(value < CASH_FLOW_GOOD)
        color := COLOR_ALERT
    else
        color := COLOR_GOOD
stringName_EBIT = "EBIT"
stringValue_EBIT = str.tostring(truncate(EBIT)) + "M"

// EBITDA
EBITDA = request.financial(syminfo.tickerid, "EBITDA", "TTM") / MILLION
getEbitdaColor(value) =>
    color color = COLOR_NEUTRAL
    if(value < CASH_FLOW_GOOD)
        color := COLOR_ALERT
    else
        color := COLOR_GOOD
stringName_EBITDA = "EBITDA"
stringValue_EBITDA = str.tostring(truncate(EBITDA)) + "M"

// RETURN ON ASSETS RATIO
ROA = request.financial(syminfo.tickerid, "RETURN_ON_ASSETS", "FQ")
getRoaColor(value) =>
    color color = COLOR_NEUTRAL
    if(value < ROA_ALERT)
        color := COLOR_ALERT
    else if(value >= ROA_GOOD)
        color := COLOR_GOOD
    else
        color := COLOR_WARNING
    color
stringName_ROA = "ROA"
stringValue_ROA = str.tostring(truncate(ROA)) + "%"

// RETURN ON EQUITY RATIO
ROE = request.financial(syminfo.tickerid, "RETURN_ON_EQUITY", "FQ")
getRoeColor(value) =>
    color color = COLOR_NEUTRAL
    if(value < ROE_ALERT)
        color := COLOR_ALERT
    else if(value >= ROE_GOOD)
        color := COLOR_GOOD
    else
        color := COLOR_WARNING
    color
stringName_ROE = "ROE"
stringValue_ROE = str.tostring(truncate(ROE)) + "%"

// RETURN ON INVESTED CAPITAL RATIO
ROIC = request.financial(syminfo.tickerid, "RETURN_ON_INVESTED_CAPITAL", "FQ")
getRoicColor(value) =>
    color color = COLOR_NEUTRAL
    if(value < ROIC_ALERT)
        color := COLOR_ALERT
    else if(value >= ROIC_GOOD)
        color := COLOR_GOOD
    else
        color := COLOR_WARNING
    color
stringName_ROIC = "ROIC"
stringValue_ROIC = str.tostring(truncate(ROIC)) + "%"

// Stuff all values into map
f_add(stringName_floatShares, stringValue_floatShares, getFloatColor(floatShares))
f_add(stringName_PE, stringValue_PE, getPeColor(PriceEarningsRatio))
f_add(stringName_EPS, stringValue_EPS, getEpsColor(EPS))
f_add(stringName_PB, stringValue_PB, getPriceBookRatioColor(PriceBookRatio))
f_add(stringName_DE, stringValue_DE, getDeRatioColor(DE))
f_add(stringName_PEG, stringValue_PEG, getPegRatioColor(PEG))
f_add(stringName_dividend, stringValue_dividend, getDividendColor(dividend))
f_add(stringName_grossMargin, stringValue_grossMargin, getGrossMarginColor(grossMargin))
f_add(stringName_netMargin, stringValue_netMargin, getNetMarginColor(netMargin))
f_add(stringName_cashFlow, stringValue_cashFlow, getCashFlowColor(cashFlow))
f_add(stringName_EBIT, stringValue_EBIT, getEbitColor(EBIT))
f_add(stringName_EBITDA, stringValue_EBITDA, getEbitdaColor(EBITDA))
f_add(stringName_ROA, stringValue_ROA, getRoaColor(ROA))
f_add(stringName_ROE, stringValue_ROE, getRoeColor(ROE))
f_add(stringName_ROIC, stringValue_ROIC, getRoicColor(ROIC))

NUMBER_OF_IDS  = 15
NUMBER_OF_TABLE_TITLES = 2
TOTAL_NUMBER_OF_ROWS = NUMBER_OF_TABLE_TITLES + NUMBER_OF_IDS
TOTAL_NUMBER_OF_COLUMNS = 2

// Display table
var myTable = table.new(position = position.bottom_right, columns = 2, rows = TOTAL_NUMBER_OF_ROWS, bgcolor = COLOR_BACKGROUND, border_width = TABLE_BORDER_WIDTH, frame_color = COLOR_FRAME, frame_width = TABLE_FRAME_WIDTH, border_color = COLOR_BORDER)
if(barstate.islast)
    table.set_bgcolor(myTable, COLOR_BACKGROUND)
    table.set_frame_color(myTable, COLOR_FRAME)
    table.set_border_color(myTable, COLOR_BORDER)

    titleRowIndex = 0
    table.cell(table_id = myTable, column = 0, row = titleRowIndex, text = sector, text_color = COLOR_TEXT, bgcolor = COLOR_BACKGROUND, text_halign = TABLE_TITLE_TEXT_ALIGN, text_size = TABLE_TEXT_SIZE)
    table.merge_cells(table_id = myTable, start_column = 0, start_row = titleRowIndex, end_column = 1, end_row = titleRowIndex)
    titleRowIndex := titleRowIndex + 1
    table.cell(table_id = myTable, column = 0, row = titleRowIndex, text = subSector, text_color = COLOR_TEXT, bgcolor = COLOR_BACKGROUND, text_halign = TABLE_TITLE_TEXT_ALIGN, text_size = TABLE_TEXT_SIZE)
    table.merge_cells(table_id = myTable, start_column = 0, start_row = titleRowIndex, end_column = 1, end_row = titleRowIndex)

    for columnIndex = 0 to TOTAL_NUMBER_OF_COLUMNS - 1        
        for rowIndex = titleRowIndex + 1 to NUMBER_OF_IDS + 1
            [name, value, colorValue] = f_get(rowIndex - NUMBER_OF_TABLE_TITLES)
            if(columnIndex == 0)
                table.cell(table_id = myTable, column = 0, row = rowIndex, text = name, text_color = COLOR_TEXT, bgcolor = COLOR_BACKGROUND, text_halign = TABLE_KEY_TEXT_ALIGN, text_size = TABLE_TEXT_SIZE)
            else
                table.cell(table_id = myTable, column = 1, row = rowIndex, text = value, text_color = COLOR_TEXT, bgcolor = colorValue, text_halign = TABLE_VALUE_TEXT_ALIGN, text_size = TABLE_TEXT_SIZE)